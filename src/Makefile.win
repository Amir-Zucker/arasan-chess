# Arasan Makefile for use with NMAKE on the Windows platform
# Copyright 2004-2024 by Jon Dart. All Rights Reserved.
#
VERSION=24.1
LINK_VERSION=24.1
#
#TARGET = win32
TARGET = win64

# Set PLATFORM=XP for a Windows XP compatible build
PLATFORM=MODERN
#PLATFORM=NT

#TRACE=/D_TRACE
#DEBUG=/Zi -D_DEBUG -DUNIT_TESTS
#LDDEBUG=/DEBUG
BUILD_ROOT=..
UTIL=util

# set to enable compliation with Syzygy tablebase support
SYZYGY_TBS = 1

# location of SYZYGY tablebase code
STB=syzygy\src

# enable NUMA support
#NUMA=1

# enable NNUE support
NNUE=1

# location of hwloc library (needed if NUMA enabled)
HWLOC64=E:\chess\hwloc-win64-build-2.0.4
HWLOC32=E:\chess\hwloc-win32-build-2.0.4

# build flags for different instruction sets
BASIC_SIMD_FLAGS = -DSIMD -DSSE2
POPCNT_FLAGS = -DUSE_POPCNT -DSSSE3 -DSSE41
BMI2_FLAGS= -DBMI2 $(POPCNT_FLAGS)
AVX2_FLAGS= -DAVX2
AVX512_FLAGS= -DAVX512

!IfDef BUILD_TYPE
!If "$(BUILD_TYPE)" == "old"
!Else
CFLAGS = $(CFLAGS) $(BASIC_SIMD_FLAGS)
!Endif
!If "$(BUILD_TYPE)" == "modern"
CFLAGS = $(CFLAGS) $(POPCNT_FLAGS)
!Else If "$(BUILD_TYPE)" == "avx2"
CFLAGS = $(CFLAGS) $(POPCNT_FLAGS) $(AVX2_FLAGS) /arch:AVX2
!Else If "$(BUILD_TYPE)" == "avx2-bmi2"
CFLAGS = $(CFLAGS) $(POPCNT_FLAGS) $(AVX2_FLAGS) $(BMI2_FLAGS) /arch:AVX2
!Else If "$(BUILD_TYPE)" == "avx512"
CFLAGS = $(CFLAGS) $(POPCNT_FLAGS) $(AVX2_FLAGS) $(BMI2_FLAGS) $(AVX512_FLAGS) /arch:AVX512
!Else
# TBD: would like to fail here, not clear how in NMAKE
!Endif
!Else
# default - no BUILD_TYPE defined
CFLAGS = $(CFLAGS) $(BASIC_SIMD_FLAGS)
!Endif

# Set executable name
!Ifndef ARASANX
!If "$(TARGET)" == "win64"
ARASANX = arasanx-64
!Else
ARASANX = arasanx-32
!Endif
!If "$(BUILD_TYPE)" != ""
ARASANX = $(ARASANX)-$(BUILD_TYPE)
!Endif
!Ifdef NUMA
ARASANX = $(ARASANX)-numa
!Endif
!Endif

# Target-specific flags
!If "$(TARGET)" == "win64"
ARCH=/D_WIN64
HWLOC=$(HWLOC64)
!Else
HWLOC=$(HWLOC32)
!Endif

!Ifdef DEBUG
DEST_DIR=debug
!Else
DEST_DIR=release
!Endif

BUILD = $(BUILD_ROOT)\$(TARGET)\$(DEST_DIR)
TUNE_BUILD = $(BUILD_ROOT)\$(TARGET)\$(DEST_DIR)-tune
PROFILE = $(BUILD_ROOT)\$(TARGET)\profile
PROFDATA = $(BUILD_ROOT)\$(TARGET)\profdata
PGO_BUILD = $(BUILD_ROOT)\$(TARGET)\pgo_build
RELEASE = $(BUILD_ROOT)\release
# relative to root:
SOURCE_ARCHIVE = release\arasan_source$(VERSION).zip

!If "$(PLATFORM)"=="XP"
CFLAGS=$(CFLAGS) /D_USING_V110_SDK71_ /DNTDDI_VERSION=0x05010300 /D_WIN32_WINNT=0x0501
!Endif
!IfDef NUMA
CFLAGS=$(CFLAGS) /DNUMA /I$(HWLOC)/include
NUMA_LIBS=$(HWLOC)/lib/libhwloc.lib
NUMA_OBJS=$(BUILD)/topo.obj
NUMA_PROFILE_OBJS=$(PROFILE)/topo.obj
NUMA_TUNE_OBJS=$(TUNE_BUILD)/topo.obj
!Endif
!IfDef NNUE
NNUE_FLAGS=/DNNUE /Innue
!Endif

!Ifdef ARASAN_VERSION
CFLAGS=$(CFLAGS) -DARASAN_VERSION=$(ARASAN_VERSION)
!Else
CFLAGS=$(CFLAGS) -DARASAN_VERSION=$(VERSION)
!Endif
TESTS = ..\tests

# SMP flags. Note: we don't support a non-SMP build any more.
!Ifdef DEBUG
SMP=/MTd /DSMP /DSMP_STATS
!Else
SMP=/MT /DSMP /DSMP_STATS
!Endif
# Do not run profile multithreaded - fails on current VC++ versions
#PROF_RUN_SMP=-c 2

TUNE_FLAGS=-DTUNE

!Ifndef CC
CC = cl
!Endif
LD=link

# Linker flags
LDFLAGS  = $(LDFLAGS) kernel32.lib user32.lib winmm.lib $(NUMA_LIBS) /nologo /incremental:no $(LINKOPT) /stack:4000000 /version:$(LINK_VERSION)
!If "$(PLATFORM)" == "XP"
!If "$(TARGET)" == "win64"
LDFLAGS = $(LDFLAGS) /subsystem:console,5.02
!Else
LDFLAGS = $(LDFLAGS) /subsystem:console,5.01
!Endif
!Else
LDFLAGS = $(LDFLAGS) /subsystem:console
!Endif

# compile flags
CFLAGS = $(CFLAGS) $(ARCH) /GA /GF /EHsc /D_CONSOLE /D_CRT_SECURE_NO_DEPRECATE /GF /DNOMINMAX /W2 $(TRACE) $(SMP)
# optimizations
!Ifndef DEBUG
!If "$(TARGET)"=="win64"
!If "$(PLATFORM)" == "XP"
OPT  = /Ox /Gr /Gy /GS- /DNDEBUG
!Else
OPT  = /Ox /Gr /Gy /Oi /GS- /DUSE_INTRINSICS /DNDEBUG
!Endif
LINKOPT = /LTCG /OPT:REF,ICF
!Else
OPT  = /Ox /Gr /Gy /GS- /DUSE_INTRINSICS /DNDEBUG
LINKOPT = /LTCG /OPT:REF
!Endif
!Endif

!If "$(CC)" == "icx-cl"
CFLAGS = $(CFLAGS) /Qstd=c++17
PROF_GEN_FLAGS = $(CFLAGS) $(NNUE_FLAGS) $(OPT)
LD = xilink
PROF_GEN_LD = $(LD)
!Ifndef DEBUG
LTO = /Qipo
!Endif
!Else
!If "$(CC)" == "clang-cl"
CFLAGS = $(CFLAGS) /std:c++17
PROF_GEN_FLAGS = $(CFLAGS) $(NNUE_FLAGS) $(OPT) -fprofile-generate=$(PROFDATA)
PROF_USE_FLAGS = $(CFLAGS) $(NNUE_FLAGS) $(OPT) -fprofile-use=$(PROFDATA)\default.profdata
# first link
PROF_LINK_FLAGS = -fprofile-generate=$(PROFDATA)
# final link
PROF_LINK_FLAGS2 = -fprofile-use=$(PROFDATA)default.profdata
PROF_GEN_LD = $(CC)
PROF_USE_LD = $(CC)
!Ifndef DEBUG
LTO = -flto
!Endif
LD = lld-link
!Else
# MSVC
CFLAGS = $(CFLAGS) /std:c++17
!Ifndef DEBUG
LTO = /GL
!Endif
PROF_GEN_FLAGS = $(CFLAGS) $(NNUE_FLAGS) $(OPT) $(LTO)
PROF_LINK_FLAGS = /LTCG /GENPROFILE /pgd:$(PROFILE)\arasanx.pgd
LD = link
PROF_GEN_LD = $(LD)
!Endif
!Endif

TB_FLAGS = $(CFLAGS) $(DEBUG) $(SMP) /Gr /O1 /GS- /I$(TB) /I.
TB_PROFILE_FLAGS = $(TB_FLAGS)
PROF_RUN_FLAGS = -H 64M $(PROF_RUN_SMP)
!Ifdef PASS2
PROF_FLAGS=$(PROF_USE_FLAGS)
!Else
PROF_FLAGS=$(PROF_GEN_FLAGS)
!Endif

default: dirs $(BUILD)\$(ARASANX).exe

profile: dirs $(PROFILE)\$(ARASANX).exe

tuning: dirs $(BUILD)\tuner.exe

utils: dirs $(BUILD)\pgnselect.exe $(BUILD)\playchess.exe $(BUILD)\makebook.exe $(BUILD)\makeeco.exe $(BUILD)\ecocoder.exe $(BUILD)\selfplay.exe

!IfDef SYZYGY_TBS
CFLAGS = $(CFLAGS) /I. -DSYZYGY_TBS
STB_FLAGS = /TP /I. $(CFLAGS)
STB_PROFILE_FLAGS = $(STB_FLAGS)
TB_OBJS = $(TB_OBJS) $(BUILD)\syzygy.obj $(BUILD)\tbprobe.obj
TB_TUNE_OBJS = $(TB_TUNE_OBJS) $(TUNE_BUILD)\syzygy.obj $(TUNE_BUILD)\tbprobe.obj
TB_PROFILE_OBJS = $(TB_PROFILE_OBJS) $(PROFILE)\syzygy.obj $(PROFILE)\tbprobe.obj
$(BUILD)\tbprobe.obj: $(STB)\tbprobe.c
	$(CC) $(STB_FLAGS) $(OPT) $(LTO) $(DEBUG) /c /Fo$@ $(STB)\tbprobe.c
$(TUNE_BUILD)\tbprobe.obj: $(STB)\tbprobe.c
	$(CF) $(STB_FLAGS) $(OPT) $(DEBUG) /c /Fo$@ $(STB)\tbprobe.c
$(PROFILE)\tbprobe.obj: $(STB)\tbprobe.c
	$(CC) $(STB_PROFILE_FLAGS) $(OPT) $(DEBUG) /c /Fo$@ $(STB)\tbprobe.c
!Endif
!IfDef NNUE
NNUE_OBJS = $(BUILD)\nnueintf.obj
NNUE_PROFILE_OBJS = $(PROFILE)\nnueintf.obj
!Endif

ARASANX_OBJS = $(BUILD)\arasanx.obj $(BUILD)\tester.obj \
$(BUILD)\protocol.obj $(BUILD)\input.obj \
$(BUILD)\attacks.obj $(BUILD)\bhash.obj $(BUILD)\bitboard.obj \
$(BUILD)\board.obj $(BUILD)\boardio.obj $(BUILD)\options.obj \
$(BUILD)\chess.obj $(BUILD)\material.obj $(BUILD)\movegen.obj \
$(BUILD)\params.obj $(BUILD)\scoring.obj $(BUILD)\searchc.obj \
$(BUILD)\see.obj $(BUILD)\globals.obj $(BUILD)\search.obj \
$(BUILD)\notation.obj $(BUILD)\hash.obj $(BUILD)\stats.obj \
$(BUILD)\bitprobe.obj $(BUILD)\epdrec.obj $(BUILD)\chessio.obj \
$(BUILD)\movearr.obj $(BUILD)\log.obj \
$(BUILD)\bookread.obj $(BUILD)\bookwrit.obj \
$(BUILD)\calctime.obj $(BUILD)\legal.obj $(BUILD)\eco.obj \
$(BUILD)\learn.obj $(BUILD)\bench.obj \
$(BUILD)\ecodata.obj $(BUILD)\threadp.obj $(BUILD)\threadc.obj \
$(BUILD)\unit.obj $(TB_OBJS) $(NNUE_OBJS) $(NUMA_OBJS)

TUNER_OBJS = $(TUNE_BUILD)\tuner.obj $(TUNE_BUILD)\tune.obj \
$(TUNE_BUILD)\globals.obj  \
$(TUNE_BUILD)\board.obj $(TUNE_BUILD)\boardio.obj $(TUNE_BUILD)\material.obj \
$(TUNE_BUILD)\chess.obj $(TUNE_BUILD)\attacks.obj $(TUNE_BUILD)\bitboard.obj \
$(TUNE_BUILD)\chessio.obj $(TUNE_BUILD)\epdrec.obj $(TUNE_BUILD)\bhash.obj  \
$(TUNE_BUILD)\scoring.obj $(TUNE_BUILD)\see.obj \
$(TUNE_BUILD)\movearr.obj $(TUNE_BUILD)\notation.obj \
$(TUNE_BUILD)\options.obj $(TUNE_BUILD)\bitprobe.obj \
$(TUNE_BUILD)\bookread.obj $(TUNE_BUILD)\bookwrit.obj \
$(TUNE_BUILD)\log.obj $(TUNE_BUILD)\search.obj $(TUNE_BUILD)\searchc.obj \
$(TUNE_BUILD)\movegen.obj $(TUNE_BUILD)\hash.obj $(TUNE_BUILD)\calctime.obj \
$(TUNE_BUILD)\eco.obj $(TUNE_BUILD)\ecodata.obj $(TUNE_BUILD)\legal.obj \
$(TUNE_BUILD)\stats.obj $(TUNE_BUILD)\threadp.obj $(TUNE_BUILD)\learn.obj \
$(TUNE_BUILD)\threadc.obj $(TB_TUNE_OBJS) $(NUMA_TUNE_OBJS)

ARASANX_PROFILE_OBJS = $(PROFILE)\arasanx.obj $(PROFILE)\tester.obj \
$(PROFILE)\protocol.obj $(PROFILE)\input.obj \
$(PROFILE)\attacks.obj $(PROFILE)\bhash.obj $(PROFILE)\bitboard.obj \
$(PROFILE)\board.obj $(PROFILE)\boardio.obj $(PROFILE)\options.obj \
$(PROFILE)\chess.obj $(PROFILE)\material.obj $(PROFILE)\movegen.obj \
$(PROFILE)\params.obj $(PROFILE)\scoring.obj $(PROFILE)\searchc.obj \
$(PROFILE)\see.obj $(PROFILE)\globals.obj $(PROFILE)\search.obj \
$(PROFILE)\notation.obj $(PROFILE)\hash.obj $(PROFILE)\stats.obj \
$(PROFILE)\bitprobe.obj $(PROFILE)\epdrec.obj $(PROFILE)\chessio.obj \
$(PROFILE)\movearr.obj $(PROFILE)\log.obj \
$(PROFILE)\bookread.obj $(PROFILE)\bookwrit.obj \
$(PROFILE)\calctime.obj $(PROFILE)\legal.obj $(PROFILE)\eco.obj \
$(PROFILE)\ecodata.obj $(PROFILE)\learn.obj $(PROFILE)\bench.obj \
$(PROFILE)\threadp.obj $(PROFILE)\threadc.obj \
$(PROFILE)\unit.obj $(NNUE_PROFILE_OBJS) $(TB_PROFILE_OBJS) $(NUMA_PROFILE_OBJS)

UTIL_OBJS = $(BUILD)\globals.obj $(BUILD)\board.obj \
$(BUILD)\boardio.obj $(BUILD)\material.obj $(BUILD)\chess.obj \
$(BUILD)\attacks.obj $(BUILD)\bitboard.obj $(BUILD)\chessio.obj \
$(BUILD)\epdrec.obj $(BUILD)\bhash.obj \
$(BUILD)\params.obj $(BUILD)\scoring.obj $(BUILD)\see.obj \
$(BUILD)\movearr.obj $(BUILD)\notation.obj $(BUILD)\options.obj \
$(BUILD)\bitprobe.obj $(BUILD)\bookread.obj $(BUILD)\bookwrit.obj \
$(BUILD)\log.obj $(BUILD)\movegen.obj $(BUILD)\calctime.obj \
$(BUILD)\eco.obj $(BUILD)\ecodata.obj \
$(BUILD)\legal.obj $(BUILD)\stats.obj $(BUILD)\threadp.obj \
$(BUILD)\threadc.obj $(BUILD)\search.obj $(BUILD)\searchc.obj \
$(BUILD)\hash.obj $(BUILD)\learn.obj $(TB_OBJS) $(NNUE_OBJS)

MAKEBOOK_OBJS = $(BUILD)\makebook.obj $(UTIL_OBJS)

MAKEECO_OBJS = $(BUILD)\makeeco.obj $(UTIL_OBJS)

ECOCODER_OBJS = $(BUILD)\ecocoder.obj $(UTIL_OBJS)

PGNSELECT_OBJS = $(BUILD)\pgnselect.obj $(UTIL_OBJS)

PLAYCHESS_OBJS = $(BUILD)\playchess.obj $(UTIL_OBJS)

SELFPLAY_OBJS = $(BUILD)\selfplay.obj $(UTIL_OBJS)

{}.cpp{$(BUILD)}.obj:
    $(CC) $(OPT) $(LTO) $(DEBUG) $(CFLAGS) $(NNUE_FLAGS) /c /Fo$@ $<

{$(UTIL)}.cpp{$(BUILD)}.obj:
    $(CC) $(OPT) $(LTO) $(DEBUG) $(CFLAGS) $(NNUE_FLAGS) /I. /c /Fo$@ $<

{}.cpp{$(TUNE_BUILD)}.obj:
    $(CC) $(OPT) $(LTO) $(DEBUG) $(CFLAGS) $(TUNE_FLAGS) /c /Fo$@ $<

{}.cpp{$(PROFILE)}.obj:
    $(CC) $(PROF_FLAGS) /c /Fo$@ $<

$(BUILD)\makebook.exe:  $(MAKEBOOK_OBJS)
        $(LD) $(MAKEBOOK_OBJS) $(LINKOPT) $(LDFLAGS) $(LDDEBUG) /out:$(BUILD)\makebook.exe

$(BUILD)\makeeco.exe:  $(MAKEECO_OBJS)
        $(LD) $(MAKEECO_OBJS) $(LINKOPT) $(LDFLAGS) /out:$(BUILD)\makeeco.exe

$(BUILD)\ecocoder.exe:  $(ECOCODER_OBJS)
        $(LD) $(ECOCODER_OBJS) $(LINKOPT) $(LDFLAGS) /out:$(BUILD)\ecocoder.exe

$(BUILD)\$(ARASANX).exe:  dirs $(ARASANX_OBJS)
        $(LD) $(ARASANX_OBJS) $(LINKOPT) $(LDFLAGS) $(LDDEBUG) /out:$(BUILD)\$(ARASANX).exe

$(BUILD)\tuner.exe:  dirs $(TUNER_OBJS)
        $(LD) $(TUNER_OBJS) $(LINKOPT) $(LDFLAGS) $(LDDEBUG) /out:$(BUILD)\tuner.exe

$(BUILD)\pgnselect.exe: dirs $(PGNSELECT_OBJS)
        $(LD) $(PGNSELECT_OBJS) $(LINKOPT) $(LDFLAGS) $(LDDEBUG) /out:$(BUILD)\pgnselect.exe

$(BUILD)\playchess.exe: dirs $(PLAYCHESS_OBJS)
        $(LD) $(PLAYCHESS_OBJS) $(LINKOPT) $(LDFLAGS) $(LDDEBUG) /out:$(BUILD)\playchess.exe

$(BUILD)\selfplay.exe: dirs $(SELFPLAY_OBJS)
        $(LD) $(SELFPLAY_OBJS) $(LINKOPT) $(LDFLAGS) $(LDDEBUG) /out:$(BUILD)\selfplay.exe

$(BUILD)\epdfilter.exe: dirs $(EPDFILTER_OBJS)
        $(LD) $(EPDFILTER_OBJS) $(LINKOPT) $(LDFLAGS) $(LDDEBUG) /out:$(BUILD)\epdfilter.exe

$(PROFILE)\$(ARASANX).exe: $(ARASANX_PROFILE_OBJS)
!If "$(CC)"=="clang-cl"
!Ifdef PASS2
   $(PROF_USE_LD) $(PROF_LINK_FLAGS2) $(ARASANX_PROFILE_OBJS) -o$(BUILD)\$(ARASANX).exe /link $(LDFLAGS)
!Else
    $(PROF_GEN_LD) $(PROF_LINK_FLAGS) $(ARASANX_PROFILE_OBJS) -o$(PROFILE)\$(ARASANX).exe /link $(LDFLAGS)
!Endif
!Else
#MSVC
    $(PROF_GEN_LD) $(PROF_LINK_FLAGS) $(LDFLAGS) $(ARASANX_PROFILE_OBJS) /out:$(PROFILE)\$(ARASANX).exe
!Endif

profile-run: dirs
    del /q $(PROFDATA)\*.*
    $(PROFILE)\$(ARASANX) $(PROF_RUN_FLAGS) bench

!If "$(CC)" == "clang-cl"
profile-optimized: profile-pass2 $(ARASANX_PROFILE_OBJS)

!Ifdef BUILD_TYPE
profile-pass2: pass2-prepare
   $(MAKE) PASS2=1 BUILD_TYPE=$(BUILD_TYPE) CC=$(CC) profile
!Else
profile-pass2: pass2-prepare
   $(MAKE) PASS2=1 CC=$(CC) profile profile-optimized
!Endif

pass2-prepare:
   llvm-profdata merge -output=$(PROFDATA)/default.profdata $(PROFDATA)/default_*profraw
   del /q $(PROFILE)\*.obj

!Else
profile-optimized: $(ARASANX_PROFILE_OBJS)
    copy /y $(PROFILE)\*.pgc $(PGO_BUILD)
    copy /y $(PROFILE)\*.pgd $(PGO_BUILD)
    copy /y $(PROFILE)\*.obj $(PGO_BUILD)
    $(LD) /LTCG /USEPROFILE /pgd:$(PGO_BUILD)\arasanx.pgd $(LDFLAGS) $(ARASANX_PROFILE_OBJS) /out:$(BUILD)\$(ARASANX).exe
!Endif

profile-build: dirs profile profile-run profile-optimized

profiled: profile-build

release: $(RELEASE) $(SOURCE_ARCHIVE)

$(SOURCE_ARCHIVE):
	call release.bat $(SOURCE_ARCHIVE)

$(PROFILE):
	md $(PROFILE)

$(BUILD):
	md $(BUILD)

$(BUILD)-tune:
	md $(BUILD)-tune

$(PROFDATA):
	md $(PROFDATA)

$(PGO_BUILD):
	md $(PGO_BUILD)

$(RELEASE):
	md $(RELEASE)

clean: dirs
	del $(BUILD)\*.obj
	del $(TUNE_BUILD)\*.obj
	del $(TUNE_BUILD)\*.asm
	del $(BUILD)\*.exe
	del $(BUILD)\*.asm
	del $(PROFILE)\*.asm
	del $(PROFILE)\*.pgc
	del $(PROFILE)\*.pgd
	del $(PROFILE)\*.obj
	del $(PROFILE)\*.exe
	del /q $(RELEASE)\*.*
	del /q $(PGO_BUILD)\*.*

dirs: $(BUILD) $(TUNE_BUILD) $(PROFILE) $(PROFDATA) $(PGO_BUILD) $(RELEASE)
